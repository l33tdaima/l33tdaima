function NestedInteger(val) {
    this.val = val;
    /**
     * Return true if this NestedInteger holds a single integer, rather than a nested list.
     * @return {boolean}
     */
    this.isInteger = function() {
        return (typeof this.val) === 'number';
    };
    /**
     * Return the single integer that this NestedInteger holds, if it holds a single integer
     * Return null if this NestedInteger holds a nested list
     * @return {integer}
     */
    this.getInteger = function() {
        return this.isInteger() ? this.val : null;
    };
    /**
     * Return the nested list that this NestedInteger holds, if it holds a nested list
     * Return null if this NestedInteger holds a single integer
     * @return {NestedInteger[]}
     */
    this.getList = function() {
        return this.isInteger() ? null : Array.from(this.val, (v) => new NestedInteger(v));
    };
};

exports.NestedInteger = NestedInteger;
